// Set valid ExtJS loading path (/vendor/assets/extjs4/src)
// Ext.Loader.setPath('Ext', '/assets/extjs4/src');
// Ext.Loader.setConfig({
// 	enabled:true  
// });
// 
// Ext.Loader.setConfig({
//     enabled: true,
//     paths: {
//         'Ext.calendar': './app/src'
//     }
// });

Ext.Loader.setConfig({ enabled: false });



Ext.application({

	<% Dir[File.expand_path('../app/*/', __FILE__)].each do |subdir| %>
		<% next if File.basename(subdir) == 'src' %> 
		
		<%= File.basename(subdir) %>s: <%=
		# omit all file extensions (js, js.erb, etc.) from the file name
		Dir[subdir + '/*.js*'].map {|f| File.basename(f)[/^[^.]+/] }.to_json
		%>,
	<% end %>

// ... the rest of your ExtJS 4 application definition goes here ...
// the global namespace
     name: 'AM',
     appFolder: '/assets/app',
     autoCreateViewport: true,
});
 



Ext.define("AM.view.Constants",{
	singleton	: true,
	
	LOGIN_URL	: "/login.do",
	LOGOUT_URL	: "/logout.do",
	
	GET_USERS_URL	:  "/users/all",
	GET_USER_URL	: "/users/get",
	
	switchCalendar : 0,
	switchBooking : 1 ,
	switchReport : 2 , 
	switchMaster : 3 
});





Ext.onReady(function(){
	console.log("ext onReady");
	// update the logo 
	// document.getElementById('logo-body').innerHTML = new Date().getDate();
	
	Ext.Ajax.on('beforerequest', function(conn, options) {
		// always include the auth_token.. 
			var currentUser = Ext.decode( localStorage.getItem('currentUser'));

			if( currentUser !== null){
				var auth_token_value = currentUser['auth_token'];
				Ext.Ajax.extraParams = { auth_token: auth_token_value };
			}
			
		// include the csrf prevention 
	    var content, metatag;
	    metatag = Ext.select('meta[name="csrf-token"]');
	    if (metatag.first() != null) {
	      content = metatag.first().dom.content;
	      options.headers || (options.headers = {});
	      return options.headers["X-CSRF-Token"] = content;
	    }
	  }, this);
	
	
		 
			
				 	Extensible.calendar.data.EventMappings = {
				 			        // These are the same fields as defined in the standard EventRecord object but the
				 			        // names and mappings have all been customized. Note that the name of each field
				 			        // definition object (e.g., 'EventId') should NOT be changed for the default fields
				 			        // as it is the key used to access the field data programmatically.
				 			        EventId:     {name: 'ID', mapping:'id', type:'int'}, // int by default
				 			        CalendarId:  {name: 'CalID', mapping: 'calendar_id', type: 'int'}, // int by default
				 			        Title:       {name: 'EvtTitle', mapping: 'title', type :'string'},
				 			        StartDate:   {name: 'StartDt', mapping: 'start_datetime', type: 'date', dateFormat: 'c'},
				 			        EndDate:     {name: 'EndDt', mapping: 'end_datetime', type: 'date', dateFormat: 'c'},
				 			        RRule:       {name: 'RecurRule', mapping: 'recur_rule'},
				 			        Location:    {name: 'Location', mapping: 'location'},
				 			        Notes:       {name: 'Desc', mapping: 'full_desc'},
				 			        Url:         {name: 'LinkUrl', mapping: 'link_url'},
				 			        IsAllDay:    {name: 'AllDay', mapping: 'all_day', type: 'boolean'},
				 			        Reminder:    {name: 'Reminder', mapping: 'reminder'},
				 			
				 			        // We can also add some new fields that do not exist in the standard EventRecord:
				 			        CreatedBy:   {name: 'CreatedBy', mapping: 'created_by'},
				 			        IsPrivate:   {name: 'Private', mapping:'private', type:'boolean'}
				 			    };
			    // Don't forget to reconfigure!
			
			    Extensible.calendar.data.EventModel.reconfigure();
			    // One key thing to remember is that any record reconfiguration you want to perform
			    // must be done PRIOR to initializing your data store, otherwise the changes will
			    // not be reflected in the store's records.
			
			
			    
			    Extensible.calendar.data.CalendarMappings = {
			        // Same basic concept for the CalendarMappings as above
			        CalendarId:   {name:'ID', mapping: 'cal_id', type: 'string'}, // int by default
			        Title:        {name:'CalTitle', mapping: 'cal_title', type: 'string'},
			        Description:  {name:'Desc', mapping: 'cal_desc', type: 'string'},
			        ColorId:      {name:'Color', mapping: 'cal_color', type: 'int'},
			        IsHidden:     {name:'Hidden', mapping: 'hidden', type: 'boolean'}
			    };
			 
			    Extensible.calendar.data.CalendarModel.reconfigure();
			
				 
			
			// 
			// 
			// 
			// 
			// var calendarStore = Ext.create('Extensible.calendar.data.MemoryCalendarStore', {
			//         data: Extensible.example.calendar.data.CalendarsCustom.getData() // Ext.create('Extensible.example.calendar.data.CalendarsCustom')
			//     });
			// 
			// var eventStore = Ext.create('Extensible.calendar.data.MemoryEventStore', {
			//         // defined in ../data/EventsCustom.js
			//         data: Extensible.example.calendar.data.EventsCustom.getData()
			//     });

		// var calendarStore = Ext.create('Extensible.calendar.data.MemoryCalendarStore', {
		//         data: Extensible.calendar.data.Calendars.getData() // Ext.create('Extensible.example.calendar.data.CalendarsCustom')
		//     });
		// 
		// var eventStore = Ext.create('Extensible.calendar.data.MemoryEventStore', {
		//         // defined in ../data/EventsCustom.js
		//         data: Extensible.calendar.data.Events.getData()
		//     });
		// 
		//  
		// Ext.create('Extensible.calendar.CalendarPanel', {
		//         eventStore: eventStore,
		//         calendarStore: calendarStore,
		//         renderTo: 'cal',
		//         title: 'Custom Event Mappings',
		//         width: 800,
		//         height: 700
		//     });
		
});


